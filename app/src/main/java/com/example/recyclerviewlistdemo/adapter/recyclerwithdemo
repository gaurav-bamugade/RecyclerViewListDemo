
Creating a RecyclerView with nested RecyclerViews in Android (also known as a "RecyclerView of RecyclerViews") is a common pattern used to display hierarchical or categorized data. Here, you will learn how to set up such a structure, including handling click events from the inner RecyclerView that are captured in the outer RecyclerView's adapter.

Step 1: Define the Data Model
You'll need a model for the outer items that contains a list of inner items.

kotlin
Copy code
data class OuterItem(
    val title: String,
    val innerItems: List<InnerItem>
)

data class InnerItem(
    val id: Int,
    val name: String
)
Step 2: Create the Inner RecyclerView Adapter
This adapter manages the inner items.

kotlin
Copy code
class InnerAdapter(
    private val innerItems: List<InnerItem>,
    private val onItemClick: (InnerItem) -> Unit
) : RecyclerView.Adapter<InnerAdapter.InnerViewHolder>() {

    class InnerViewHolder(val binding: ItemInnerBinding) : RecyclerView.ViewHolder(binding.root)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): InnerViewHolder {
        val binding = ItemInnerBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return InnerViewHolder(binding)
    }

    override fun onBindViewHolder(holder: InnerViewHolder, position: Int) {
        val item = innerItems[position]
        holder.binding.textViewName.text = item.name
        holder.binding.root.setOnClickListener {
            onItemClick(item)
        }
    }

    override fun getItemCount() = innerItems.size
}
Step 3: Create the Outer RecyclerView Adapter
This adapter holds the outer items, each containing its own RecyclerView.

kotlin
Copy code
class OuterAdapter(
    private val outerItems: List<OuterItem>,
    private val onInnerItemClick: (InnerItem) -> Unit
) : RecyclerView.Adapter<OuterAdapter.OuterViewHolder>() {

    class OuterViewHolder(val binding: ItemOuterBinding) : RecyclerView.ViewHolder(binding.root)

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): OuterViewHolder {
        val binding = ItemOuterBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return OuterViewHolder(binding)
    }

    override fun onBindViewHolder(holder: OuterViewHolder, position: Int) {
        val outerItem = outerItems[position]
        holder.binding.textViewTitle.text = outerItem.title

        // Setting up the inner RecyclerView
        holder.binding.recyclerViewInner.apply {
            layoutManager = LinearLayoutManager(holder.binding.recyclerViewInner.context, RecyclerView.HORIZONTAL, false)
            adapter = InnerAdapter(outerItem.innerItems) { innerItem ->
                onInnerItemClick(innerItem) // This forwards the click event to the outer adapter's listener
            }
        }
    }

    override fun getItemCount() = outerItems.size
}
Step 4: Set Up RecyclerView in Your Activity or Fragment
kotlin
Copy code
class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val outerItems = generateDummyData() // Assume this function generates your data
        setupRecyclerView(outerItems)
    }

    private fun setupRecyclerView(outerItems: List<OuterItem>) {
        binding.recyclerViewOuter.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = OuterAdapter(outerItems) { innerItem ->
                Toast.makeText(this@MainActivity, "Clicked: ${innerItem.name}", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun generateDummyData(): List<OuterItem> {
        // This function should generate your list of OuterItem with their corresponding InnerItems
        return listOf(
            OuterItem("Category 1", listOf(InnerItem(1, "Item 1-1"), InnerItem(2, "Item 1-2"))),
            OuterItem("Category 2", listOf(InnerItem(3, "Item 2-1"), InnerItem(4, "Item 2-2")))
        )
    }
}
Explanation
Outer and Inner Adapters: The OuterAdapter manages a list of OuterItem, each containing a title and a list of InnerItem. The InnerAdapter handles the individual InnerItem instances.
Handling Clicks: Clicks on the inner items are passed up from the InnerAdapter to the OuterAdapter, and then to the Activity or Fragment where they can be handled appropriately.
This structure allows you to maintain separation of concerns, with the outer adapter managing the layout and instantiation of the inner RecyclerViews, and the inner adapter managing only its own items. It also efficiently propagates click events up to where they can be handled in a context-aware manner.