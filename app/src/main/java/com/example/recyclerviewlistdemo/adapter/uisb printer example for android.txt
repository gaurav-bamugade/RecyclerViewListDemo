https://techdocs.zebra.com/link-os/2-12/android/content/com/zebra/sdk/comm/usbconnection

https://www.zebra.com/us/en/software/printer-software/multiplatform-sdk.html

https://github.com/ZebraDevs/LinkOS-Android-Samples/blob/ConnectivityDemo/ConnectivityDemo/app/src/main/java/com/zebra/connectivitydemo/SettingsHelper.java


https://www.zebra.com/content/dam/zebra/software/en/application-notes/getting-started-android-development-link-os-sdk-android-studio-app-note.pdf

 https://techdocs.zebra.com/link-os/2-14/android/content/com/zebra/sdk/printer/discovery/usbdiscoverer
https://techdocs.zebra.com/link-os/2-14/android/

https://github.com/pretix/pretixprint-android

example fr usb
1. Design the Print Layout in Android
Create an XML layout file for the print content.

xml
Copy code
<!-- res/layout/print_layout.xml -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Title"
        android:textSize="24sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/content"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="This is the content to print."
        android:textSize="16sp"/>
</LinearLayout>
2. Render the Layout to a Bitmap
Convert the layout to a bitmap programmatically.

kotlin
Copy code
import android.graphics.Bitmap
import android.graphics.Canvas
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val inflater = LayoutInflater.from(this)
        val printView = inflater.inflate(R.layout.print_layout, null)

        // Optionally, customize the view
        printView.findViewById<TextView>(R.id.title).text = "My Title"
        printView.findViewById<TextView>(R.id.content).text = "My custom content to print."

        val bitmap = createBitmapFromView(printView)
        // Convert the bitmap to a printer-compatible format (ZPL)
        val zplData = convertBitmapToZpl(bitmap)
        // Send the ZPL data to the printer
        sendPrintJob(zplData)
    }

    private fun createBitmapFromView(view: View): Bitmap {
        view.measure(
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        )
        view.layout(0, 0, view.measuredWidth, view.measuredHeight)

        val bitmap = Bitmap.createBitmap(view.measuredWidth, view.measuredHeight, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        view.draw(canvas)
        return bitmap
    }

    private fun convertBitmapToZpl(bitmap: Bitmap): String {
        // Implement the logic to convert the bitmap to ZPL format
        // You can use third-party libraries or tools like Zebra's utilities
        return ZplUtils.convertBitmapToZpl(bitmap)
    }

    private fun sendPrintJob(zplData: String) {
        // Implementation of sending the ZPL data to the printer
        // Using the code snippet you provided
        UsbDiscoveryAndPrintExample().printZplData(zplData)
    }
}
3. Convert the Bitmap to ZPL
You will need to convert the bitmap to ZPL. Zebra provides utilities and documentation to help with this.

Here is a helper function to convert the bitmap to ZPL:

kotlin
Copy code
object ZplUtils {

    fun convertBitmapToZpl(bitmap: Bitmap): String {
        // Implement bitmap to ZPL conversion logic
        // This is a simplified example
        val sb = StringBuilder()
        sb.append("^XA\n")
        sb.append("^FO50,50\n") // Position of the image on the label
        sb.append("^GFA,") // Bitmap header

        val width = bitmap.width
        val height = bitmap.height
        val binaryBitmap = convertBitmapToBinary(bitmap)

        sb.append(binaryBitmap.length / 8) // Total number of bytes
        sb.append(",")
        sb.append(binaryBitmap.length / 8)
        sb.append(",")
        sb.append("0,") // Compression scheme (0 for no compression)
        sb.append(binaryBitmap)

        sb.append("^FS\n")
        sb.append("^XZ\n")
        return sb.toString()
    }

    private fun convertBitmapToBinary(bitmap: Bitmap): String {
        val sb = StringBuilder()
        for (y in 0 until bitmap.height) {
            for (x in 0 until bitmap.width) {
                val pixel = bitmap.getPixel(x, y)
                if (pixel == -0x1000000) { // Black pixel
                    sb.append("1")
                } else {
                    sb.append("0")
                }
            }
        }
        return sb.toString()
    }
}


android usb printer
public class UsbDiscoverer
extends Object
Discovers Zebra printers connected to an Androidâ„¢ device via USB Host
package test.zebra.sdk.printer.discovery.examples;

 import java.util.*;

 import com.zebra.sdk.comm.*;
 import com.zebra.sdk.printer.discovery.*;

 import android.R;
 import android.app.*;
 import android.content.*;
 import android.hardware.usb.*;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.*;

 public class UsbDiscoveryAndPrintExample extends Activity {

     private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
     private IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);

     private PendingIntent mPermissionIntent;
     private boolean hasPermissionToCommunicate = false;

     private UsbManager mUsbManager;
     private Button buttonRequestPermission;
     private Button buttonPrint;
     private DiscoveredPrinterUsb discoveredPrinterUsb;

     // Catches intent indicating if the user grants permission to use the USB device
     private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
         public void onReceive(Context context, Intent intent) {
             String action = intent.getAction();
             if (ACTION_USB_PERMISSION.equals(action)) {
                 synchronized (this) {
                     UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
                     if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                         if (device != null) {
                             hasPermissionToCommunicate = true;
                         }
                     }
                 }
             }
         }
     };

     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_list_item);

         // Register broadcast receiver that catches USB permission intent
         mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);
         mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);

         buttonRequestPermission = (Button) findViewById(R.id.button1);
         buttonPrint = (Button) findViewById(R.id.button2);

         // Request Permission button click
         buttonRequestPermission.setOnClickListener(new View.OnClickListener() {

             public void onClick(View v) {
                 new Thread(new Runnable() {

                     public void run() {
                         // Find connected printers
                         UsbDiscoveryHandler handler = new UsbDiscoveryHandler();
                         UsbDiscoverer.findPrinters(getApplicationContext(), handler);

                         try {
                             while (!handler.discoveryComplete) {
                                 Thread.sleep(100);
                             }

                             if (handler.printers != null && handler.printers.size() > 0) {
                                 discoveredPrinterUsb = handler.printers.get(0);

                                 if (!mUsbManager.hasPermission(discoveredPrinterUsb.device)) {
                                     mUsbManager.requestPermission(discoveredPrinterUsb.device, mPermissionIntent);
                                 } else {
                                     hasPermissionToCommunicate = true;
                                 }
                             }
                         } catch (Exception e) {
                             Toast.makeText(getApplicationContext(), e.getMessage() + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
                         }
                     }
                 }).start();
             }
         });

         // Print button click
         buttonPrint.setOnClickListener(new View.OnClickListener() {

             public void onClick(View v) {
                 if (hasPermissionToCommunicate) {
                     Connection conn = null;
                     try {
                         conn = discoveredPrinterUsb.getConnection();
                         conn.open();
                         conn.write("~WC".getBytes());
                     } catch (ConnectionException e) {
                         Toast.makeText(getApplicationContext(), e.getMessage() + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
                     } finally {
                         if (conn != null) {
                             try {
                                 conn.close();
                             } catch (ConnectionException e) {
                                 e.printStackTrace();
                             }
                         }
                     }
                 } else {
                     Toast.makeText(getApplicationContext(), "No permission to communicate", Toast.LENGTH_LONG).show();
                 }
             }
         });
     }

     protected void onPause() {
         unregisterReceiver(mUsbReceiver);
         super.onPause();
     }

     protected void onResume() {
         super.onResume();
         registerReceiver(mUsbReceiver, filter);
     }

     // Handles USB device discovery
     class UsbDiscoveryHandler implements DiscoveryHandler {
         public List<DiscoveredPrinterUsb> printers;
         public boolean discoveryComplete = false;

         public UsbDiscoveryHandler() {
             printers = new LinkedList<DiscoveredPrinterUsb>();
         }

         public void foundPrinter(final DiscoveredPrinter printer) {
             printers.add((DiscoveredPrinterUsb) printer);
         }

         public void discoveryFinished() {
             discoveryComplete = true;
         }

         public void discoveryError(String message) {
             discoveryComplete = true;
         }
     }
 }




To print a design created in an Android XML layout to a Zebra GK420D printer connected via USB, you need to follow these main steps:

Design the Print Layout: Create the layout using Android's view system.
Render the Layout to a Bitmap: Convert the layout to a bitmap.
Convert the Bitmap to ZPL: Convert the bitmap to Zebra Programming Language (ZPL).
Send the ZPL to the Zebra GK420D Printer: Use the Zebra SDK to send the ZPL data to the printer via USB.
Here's a step-by-step guide to achieve this:

Step 1: Design the Print Layout in XML
Create an XML layout file for the print content.

xml
Copy code
<!-- res/layout/print_layout.xml -->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="16dp">

    <TextView
        android:id="@+id/title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Title"
        android:textSize="24sp"
        android:textStyle="bold"/>

    <TextView
        android:id="@+id/content"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="This is the content to print."
        android:textSize="16sp"/>
</LinearLayout>
Step 2: Render the Layout to a Bitmap
Convert the layout to a bitmap programmatically.

kotlin
Copy code
import android.graphics.Bitmap
import android.graphics.Canvas
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val inflater = LayoutInflater.from(this)
        val printView = inflater.inflate(R.layout.print_layout, null)

        // Optionally, customize the view
        printView.findViewById<TextView>(R.id.title).text = "My Title"
        printView.findViewById<TextView>(R.id.content).text = "My custom content to print."

        val bitmap = createBitmapFromView(printView)
        // Convert the bitmap to a printer-compatible format (ZPL)
        val zplData = convertBitmapToZpl(bitmap)
        // Send the ZPL data to the printer
        sendPrintJob(zplData)
    }

    private fun createBitmapFromView(view: View): Bitmap {
        view.measure(
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
            View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED)
        )
        view.layout(0, 0, view.measuredWidth, view.measuredHeight)

        val bitmap = Bitmap.createBitmap(view.measuredWidth, view.measuredHeight, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap)
        view.draw(canvas)
        return bitmap
    }
}
Step 3: Convert the Bitmap to ZPL
You will need a utility function to convert the bitmap to ZPL. This involves encoding the bitmap into the ZPL format. Below is a simplified example, but you may need to adjust based on the actual requirements and bitmap format.

kotlin
Copy code
object ZplUtils {

    fun convertBitmapToZpl(bitmap: Bitmap): String {
        val sb = StringBuilder()
        sb.append("^XA\n")
        sb.append("^FO50,50\n") // Position of the image on the label
        sb.append("^GFA,") // Bitmap header

        val width = bitmap.width
        val height = bitmap.height
        val binaryBitmap = convertBitmapToBinary(bitmap)

        sb.append(binaryBitmap.length / 8) // Total number of bytes
        sb.append(",")
        sb.append(binaryBitmap.length / 8)
        sb.append(",")
        sb.append("0,") // Compression scheme (0 for no compression)
        sb.append(binaryBitmap)

        sb.append("^FS\n")
        sb.append("^XZ\n")
        return sb.toString()
    }

    private fun convertBitmapToBinary(bitmap: Bitmap): String {
        val sb = StringBuilder()
        for (y in 0 until bitmap.height) {
            for (x in 0 until bitmap.width) {
                val pixel = bitmap.getPixel(x, y)
                if (pixel == -0x1000000) { // Black pixel
                    sb.append("1")
                } else {
                    sb.append("0")
                }
            }
        }
        return sb.toString()
    }
}
Step 4: Send the ZPL to the Zebra GK420D Printer
Use the Zebra SDK to send the ZPL data to the printer via USB.

kotlin
Copy code
import android.hardware.usb.UsbManager
import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.zebra.sdk.comm.Connection
import com.zebra.sdk.comm.ConnectionException
import com.zebra.sdk.printer.discovery.DiscoveredPrinterUsb
import com.zebra.sdk.printer.discovery.DiscoveryHandler
import com.zebra.sdk.printer.discovery.UsbDiscoverer

class UsbDiscoveryAndPrintExample : AppCompatActivity() {

    private lateinit var mUsbManager: UsbManager
    private var discoveredPrinterUsb: DiscoveredPrinterUsb? = null
    private var hasPermissionToCommunicate = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mUsbManager = getSystemService(Context.USB_SERVICE) as UsbManager

        // Discover USB printers
        discoverUsbPrinters()

        // Print the ZPL data
        findViewById<Button>(R.id.buttonPrint).setOnClickListener {
            if (hasPermissionToCommunicate) {
                printZplData()
            } else {
                Toast.makeText(this, "No permission to communicate", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun discoverUsbPrinters() {
        Thread {
            val handler = UsbDiscoveryHandler()
            UsbDiscoverer.findPrinters(applicationContext, handler)

            while (!handler.discoveryComplete) {
                Thread.sleep(100)
            }

            if (handler.printers.isNotEmpty()) {
                discoveredPrinterUsb = handler.printers[0]
                if (!mUsbManager.hasPermission(discoveredPrinterUsb!!.device)) {
                    val mPermissionIntent = PendingIntent.getBroadcast(this, 0, Intent(ACTION_USB_PERMISSION), 0)
                    mUsbManager.requestPermission(discoveredPrinterUsb!!.device, mPermissionIntent)
                } else {
                    hasPermissionToCommunicate = true
                }
            }
        }.start()
    }

    private fun printZplData(zplData: String) {
        discoveredPrinterUsb?.let {
            var conn: Connection? = null
            try {
                conn = it.connection
                conn.open()
                conn.write(zplData.toByteArray())
            } catch (e: ConnectionException) {
                Toast.makeText(applicationContext, e.message, Toast.LENGTH_LONG).show()
            } finally {
                conn?.close()
            }
        }
    }

    private inner class UsbDiscoveryHandler : DiscoveryHandler {
        val printers = mutableListOf<DiscoveredPrinterUsb>()
        var discoveryComplete = false

        override fun foundPrinter(printer: DiscoveredPrinter) {
            printers.add(printer as DiscoveredPrinterUsb)
        }

        override fun discoveryFinished() {
            discoveryComplete = true
        }

        override fun discoveryError(message: String) {
            discoveryComplete = true
        }
    }

    companion object {
        private const val ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION"
    }
}
Summary
Design the layout: Create your desired print layout in XML.
Render the layout: Convert the layout to a bitmap.
Convert bitmap to ZPL: Use a utility function to convert the bitmap to ZPL.
Send ZPL to printer: Use the Zebra SDK to send the ZPL data to the GK420D printer via USB.
Ensure you test and adjust the ZPL conversion and communication logic as needed for your specific printer and requirements.

do we need implementation dependency?
ChatGPT
Yes, to communicate with a Zebra printer from an Android application, especially using USB, you will need to add dependencies for the Zebra SDK to your project. The Zebra SDK provides libraries and tools to facilitate communication with Zebra printers, including the conversion of data to ZPL and sending commands to the printer.

Here are the steps to include the necessary dependencies:

Step 1: Add Zebra SDK Dependencies
First, you need to add the Zebra SDK dependencies to your build.gradle file.

Add Zebra Maven Repository: Add the Zebra Maven repository to your project-level build.gradle file.

gradle
Copy code
allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://maven.zebra.com/maven2/"
        }
    }
}
Add Zebra SDK Dependency: Add the Zebra SDK dependency to your app-level build.gradle file.

gradle
Copy code
dependencies {
    implementation 'com.zebra:zebra-printconnect-sdk:1.0.0'  // Use the latest version available
}
Step 2: Update AndroidManifest.xml
Add the necessary permissions to your AndroidManifest.xml to allow USB communication.

xml
Copy code
<uses-permission android:name="android.permission.USB_PERMISSION" />
<application
    ...>
    <activity
        android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED" />
        </intent-filter>
    </activity>

    <receiver android:name=".UsbBroadcastReceiver">
        <intent-filter>
            <action android:name="com.android.example.USB_PERMISSION" />
        </intent-filter>
    </receiver>
</application>
Step 3: Implement USB Broadcast Receiver
Create a UsbBroadcastReceiver to handle USB permission requests and device attachment.

kotlin
Copy code
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.hardware.usb.UsbDevice
import android.hardware.usb.UsbManager
import android.widget.Toast

class UsbBroadcastReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        val action = intent.action
        if (UsbManager.ACTION_USB_DEVICE_ATTACHED == action) {
            val device: UsbDevice? = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE)
            device?.let {
                val manager = context.getSystemService(Context.USB_SERVICE) as UsbManager
                if (!manager.hasPermission(it)) {
                    val permissionIntent = PendingIntent.getBroadcast(context, 0, Intent("com.android.example.USB_PERMISSION"), 0)
                    manager.requestPermission(it, permissionIntent)
                }
            }
        } else if ("com.android.example.USB_PERMISSION" == action) {
            synchronized(this) {
                val device: UsbDevice? = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE)
                if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                    device?.let {
                        // Permission granted, you can now communicate with the device
                        Toast.makeText(context, "Permission granted for device ${it.deviceName}", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(context, "Permission denied for device ${device?.deviceName}", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
}
Step 4: Implement the Print Logic in MainActivity
Ensure your MainActivity includes the necessary logic to discover the printer, request permission, and send the print job.

kotlin
Copy code
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.hardware.usb.UsbManager
import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.zebra.sdk.comm.Connection
import com.zebra.sdk.comm.ConnectionException
import com.zebra.sdk.printer.discovery.DiscoveredPrinterUsb
import com.zebra.sdk.printer.discovery.DiscoveryHandler
import com.zebra.sdk.printer.discovery.UsbDiscoverer

class MainActivity : AppCompatActivity() {

    private lateinit var mUsbManager: UsbManager
    private var discoveredPrinterUsb: DiscoveredPrinterUsb? = null
    private var hasPermissionToCommunicate = false
    private val ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION"
    private lateinit var mPermissionIntent: PendingIntent

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mUsbManager = getSystemService(Context.USB_SERVICE) as UsbManager
        mPermissionIntent = PendingIntent.getBroadcast(this, 0, Intent(ACTION_USB_PERMISSION), 0)
        val filter = IntentFilter(ACTION_USB_PERMISSION)
        registerReceiver(UsbBroadcastReceiver(), filter)

        // Discover USB printers
        discoverUsbPrinters()

        // Print the ZPL data
        findViewById<Button>(R.id.buttonPrint).setOnClickListener {
            if (hasPermissionToCommunicate) {
                val zplData = "^XA^FO50,50^A0N50,50^FDHello, World!^FS^XZ"  // Replace with actual ZPL data
                printZplData(zplData)
            } else {
                Toast.makeText(this, "No permission to communicate", Toast.LENGTH_LONG).show()
            }
        }
    }

    private fun discoverUsbPrinters() {
        Thread {
            val handler = UsbDiscoveryHandler()
            UsbDiscoverer.findPrinters(applicationContext, handler)

            while (!handler.discoveryComplete) {
                Thread.sleep(100)
            }

            if (handler.printers.isNotEmpty()) {
                discoveredPrinterUsb = handler.printers[0]
                if (!mUsbManager.hasPermission(discoveredPrinterUsb!!.device)) {
                    mUsbManager.requestPermission(discoveredPrinterUsb!!.device, mPermissionIntent)
                } else {
                    hasPermissionToCommunicate = true
                }
            }
        }.start()
    }

    private fun printZplData(zplData: String) {
        discoveredPrinterUsb?.let {
            var conn: Connection? = null
            try {
                conn = it.connection
                conn.open()
                conn.write(zplData.toByteArray())
            } catch (e: ConnectionException) {
                Toast.makeText(applicationContext, e.message, Toast.LENGTH_LONG).show()
            } finally {
                conn?.close()
            }
        }
    }

    private inner class UsbDiscoveryHandler : DiscoveryHandler {
        val printers = mutableListOf<DiscoveredPrinterUsb>()
        var discoveryComplete = false

        override fun foundPrinter(printer: DiscoveredPrinter) {
            printers.add(printer as DiscoveredPrinterUsb)
        }

        override fun discoveryFinished() {
            discoveryComplete = true
        }

        override fun discoveryError(message: String) {
            discoveryComplete = true
        }
    }
}
Summary
Add Zebra SDK dependencies: Add the necessary dependencies to your build.gradle file.
Update AndroidManifest.xml: Include USB permission and broadcast receiver.
Implement USB Broadcast Receiver: Handle USB permission requests and device attachment.
Implement MainActivity: Discover the printer, request permission, and send the print job.
By following these steps, you should be able to design a layout in Android, convert it to a bitmap, convert the bitmap to ZPL, and send the ZPL data to a Zebra GK420D printer via USB.





https://techdocs.zebra.com/link-os/2-14/android_card/content/examples/src/test/com/zebra/sdk/printer/discovery/examples/usbdiscoveryandprintexample


package test.com.zebra.sdk.printer.discovery.examples;

import java.io.*;
import java.util.*;

import org.apache.commons.io.FileUtils;

import com.zebra.sdk.comm.*;
import com.zebra.sdk.common.card.containers.*;
import com.zebra.sdk.common.card.enumerations.*;
import com.zebra.sdk.common.card.errors.ZebraCardErrors;
import com.zebra.sdk.common.card.exceptions.ZebraCardException;
import com.zebra.sdk.common.card.graphics.*;
import com.zebra.sdk.common.card.graphics.enumerations.RotationType;
import com.zebra.sdk.common.card.printer.*;
import com.zebra.sdk.device.ZebraIllegalArgumentException;
import com.zebra.sdk.printer.discovery.*;
import com.zebra.sdk.settings.SettingsException;

import android.app.*;
import android.content.*;
import android.graphics.Color;
import android.hardware.usb.*;
import android.os.Bundle;
import android.view.View;
import android.widget.*;

public class UsbDiscoveryAndPrintExample extends Activity {

	private static final String ACTION_USB_PERMISSION = "com.android.example.USB_PERMISSION";
	private IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);

	private PendingIntent mPermissionIntent;
	private boolean hasPermissionToCommunicate = false;

	private UsbManager mUsbManager;
	private Button buttonRequestPermission;
	private Button buttonPrint;
	private DiscoveredPrinterUsb discoveredPrinterUsb;

	private static final int CARD_FEED_TIMEOUT = 30000;

	// Catches intent indicating if the user grants permission to use the USB device
	private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					UsbDevice device = (UsbDevice) intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
					if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
						if (device != null) {
							hasPermissionToCommunicate = true;
						}
					}
				}
			}
		}
	};

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(android.R.layout.activity_list_item);

		// Register broadcast receiver that catches USB permission intent
		mUsbManager = (UsbManager) getSystemService(Context.USB_SERVICE);
		mPermissionIntent = PendingIntent.getBroadcast(this, 0, new Intent(ACTION_USB_PERMISSION), 0);

		buttonRequestPermission = (Button) findViewById(android.R.id.button1);
		buttonPrint = (Button) findViewById(android.R.id.button2);

		// Request Permission button click
		buttonRequestPermission.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				new Thread(new Runnable() {

					public void run() {
						// Find connected printers
						UsbDiscoveryHandler handler = new UsbDiscoveryHandler();
						UsbDiscoverer.findPrinters(getApplicationContext(), handler);

						try {
							while (!handler.discoveryComplete) {
								Thread.sleep(100);
							}

							if (handler.printers != null && handler.printers.size() > 0) {
								discoveredPrinterUsb = handler.printers.get(0);

								if (!mUsbManager.hasPermission(discoveredPrinterUsb.device)) {
									mUsbManager.requestPermission(discoveredPrinterUsb.device, mPermissionIntent);
								} else {
									hasPermissionToCommunicate = true;
								}
							}
						} catch (Exception e) {
							Toast.makeText(getApplicationContext(), e.getMessage() + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
						}
					}
				}).start();
			}
		});

		// Print button click
		buttonPrint.setOnClickListener(new View.OnClickListener() {

			public void onClick(View v) {
				Connection connection = null;
				ZebraCardPrinter printer = null;

				try {
					if (hasPermissionToCommunicate) {
						try {
							connection = discoveredPrinterUsb.getConnection();
							connection.open();

							printer = ZebraCardPrinterFactory.getInstance(connection);
							if (printer != null) {
								printCard(printer);
							}
						} catch (Exception e) {
							Toast.makeText(getApplicationContext(), e.getMessage() + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
						}
					} else {
						Toast.makeText(getApplicationContext(), "No permission to communicate", Toast.LENGTH_LONG).show();
					}
				} finally {
					try {
						if (printer != null) {
							printer.destroy();
							printer = null;
						}
					} catch (ZebraCardException e) {
						e.printStackTrace();
					}

					if (connection != null) {
						try {
							connection.close();
							connection = null;
						} catch (ConnectionException e) {
							e.printStackTrace();
						}
					}
				}
			}
		});
	}

    protected void onPause() {
        unregisterReceiver(mUsbReceiver);
        super.onPause();
    }

	protected void onResume() {
		super.onResume();
        registerReceiver(mUsbReceiver, filter);
	}

	protected void printCard(ZebraCardPrinter printer) throws ZebraCardException, ConnectionException, IOException, SettingsException, ZebraIllegalArgumentException {
		ZebraGraphics graphics = null;
		try {
			List<GraphicsInfo> graphicsData = new ArrayList<GraphicsInfo>();
			graphics = new ZebraCardGraphics(printer);

			generatePrintJobImage(graphics, graphicsData);

			int jobId = printer.print(1, graphicsData);
			pollJobStatus(printer, jobId);

			JobStatusInfo jStatus = printer.getJobStatus(jobId);
			Toast.makeText(getApplicationContext(), "Job completed: " + jStatus.printStatus, Toast.LENGTH_LONG).show();
		} finally {
			if (graphics != null) {
				graphics.clear();
				graphics.close();
			}
		}
	}

	private void generatePrintJobImage(ZebraGraphics graphics, List<GraphicsInfo> graphicsData) throws IOException {
		GraphicsInfo grInfo = new GraphicsInfo();

		graphics.initialize(0, 0, OrientationType.Landscape, PrintType.Color, Color.WHITE);

		// Front Color
		grInfo.side = CardSide.Front;
		grInfo.printType = PrintType.Color;
		grInfo.graphicType = GraphicType.BMP;

		String filepath = "myImage.bmp"; // replace with path to your image
		byte[] imageData = FileUtils.readFileToByteArray(new File(filepath));

		graphics.drawImage(imageData, 0, 0, 0, 0, RotationType.RotateNoneFlipNone);
		grInfo.graphicData = graphics.createImage();
		graphics.clear();

		graphicsData.add(grInfo);

		// Front Full Overlay
		grInfo = new GraphicsInfo();
		grInfo.side = CardSide.Front;
		grInfo.printType = PrintType.Overlay;
		grInfo.graphicType = GraphicType.NA;
		grInfo.graphicData = null;
		graphicsData.add(grInfo);
	}

	private boolean pollJobStatus(ZebraCardPrinter printer, int actionID) throws ConnectionException, ZebraCardException, ZebraIllegalArgumentException {
		boolean success = false;
		long dropDeadTime = System.currentTimeMillis() + 40000;
		long pollInterval = 500;

		// Poll job status
		JobStatusInfo jobStatus = null;

		long start = System.currentTimeMillis();

		do {
			jobStatus = printer.getJobStatus(actionID);
			System.out.println(String.format("Job %d, Status:%s, Card Position:%s, " + "ReadyForNextJob:%s, Mag Status:%s, Contact Status:%s, Contactless Status:%s, " + "Error Code:%d, Alarm Code:%d", actionID, jobStatus.printStatus, jobStatus.cardPosition,
					jobStatus.readyForNextJob, jobStatus.magneticEncoding, jobStatus.contactSmartCard, jobStatus.contactlessSmartCard, jobStatus.errorInfo.value, jobStatus.alarmInfo.value));

			if (jobStatus.contactSmartCard.contains("at_station") || jobStatus.contactlessSmartCard.contains("at_station")) {
				success = true;
				break;
			} else if (jobStatus.printStatus.contains("done_ok")) {
				success = true;
				break;
			} else if (jobStatus.printStatus.contains("error") || jobStatus.printStatus.contains("cancelled")) {
				System.out.println("The job encountered an error [" + jobStatus.errorInfo.description + "] and was cancelled.");
				success = false;
				break;
			} else if (jobStatus.errorInfo.value > 0) {
				System.out.println("The job encountered an error [" + jobStatus.errorInfo.description + "] and was cancelled.");
				printer.cancel(actionID);
				success = false;
				break;
			} else if ((jobStatus.printStatus.contains("in_progress") && jobStatus.cardPosition.contains("feeding")) // ZMotif printers
					|| (jobStatus.printStatus.contains("alarm_handling") && jobStatus.alarmInfo.value == ZebraCardErrors.MEDIA_OUT_OF_CARDS)) { // ZXP printers
				if (System.currentTimeMillis() > start + CARD_FEED_TIMEOUT) {
					Toast.makeText(getApplicationContext(), "The job timed out waiting for a card and was cancelled.", Toast.LENGTH_LONG).show();
					printer.cancel(actionID);
					success = false;
					break;
				}
			}

			if (System.currentTimeMillis() > dropDeadTime) {
				success = false;
			}

			try {
				Thread.sleep(pollInterval);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		} while (true);

		return success;
	}

	// Handles USB device discovery
	private class UsbDiscoveryHandler implements DiscoveryHandler {
		public List<DiscoveredPrinterUsb> printers;
		public boolean discoveryComplete = false;

		public UsbDiscoveryHandler() {
			printers = new LinkedList<DiscoveredPrinterUsb>();
		}

		public void foundPrinter(final DiscoveredPrinter printer) {
			printers.add((DiscoveredPrinterUsb) printer);
		}

		public void discoveryFinished() {
			discoveryComplete = true;
		}

		public void discoveryError(String message) {
			discoveryComplete = true;
		}
	}
}